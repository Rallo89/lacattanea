{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicolo.torreggiani\\\\Documents\\\\GitHub\\\\lacattanea\\\\src\\\\Components\\\\Poll.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Alert, Accordion, Button, ProgressBar } from 'react-bootstrap';\nimport { useAuth } from '../context/AuthContext';\nimport \"./Poll.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Poll({\n  pollId\n}) {\n  _s();\n\n  /**\r\n   * DEFINIZIONE VARIABILI\r\n   */\n  const {\n    currentUser\n  } = useAuth();\n  const [data, setData] = useState();\n  const [voteData, setVoteData] = useState();\n  const [users, setUsers] = useState([]);\n  const [totalVotes, setTotalVotes] = useState(0);\n  const [title, setTitle] = useState();\n  const poll = pollId;\n  const url = \"http://localhost:5001/pollItem?pollId=\" + poll; //Recupero dati singola survey\n\n  useEffect(() => {\n    fetch(url).then(response => response.json()).then(data => {\n      console.log(data);\n      setVoteData(data[\"Item\"][\"options\"]);\n      setUsers(data[\"Item\"][\"usersPoll\"]);\n      setTitle(data[\"Item\"][\"title\"]);\n      setData(data);\n      let sum = 0;\n      data[\"Item\"][\"options\"].forEach(function (obj) {\n        sum += obj.voted;\n      });\n      setTotalVotes(sum);\n    });\n  }, []);\n  /**\r\n   * Gestione invio voto\r\n   * @param {*} e \r\n   * @returns \r\n   */\n\n  const submitVote = e => {\n    //Se non hai ancora votato        \n    if (!users.includes(currentUser.email)) {\n      const voteSelected = e.currentTarget.dataset.id;\n      const voteCurrent = voteData[voteSelected].voted;\n      voteData[voteSelected].voted = voteCurrent + 1;\n      setTotalVotes(totalVotes + 1);\n      users.push(currentUser.email);\n      data[\"Item\"][\"options\"] = voteData;\n      data[\"Item\"][\"usersPoll\"] = users;\n      const options = {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      fetch(url, options).then(res => console.log(res));\n    } //Se hai giÃ  votato\n    else {\n        return /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"danger\",\n          children: [/*#__PURE__*/_jsxDEV(Alert.Heading, {\n            children: \"Errore\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Hai gi\\xE0 votato per questo sondaggio!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this);\n      }\n  };\n\n  if (users.includes(currentUser.email)) {\n    let pollProgressbar = voteData.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(ProgressBar, {\n          variant: \"success\",\n          now: Number.parseFloat(item.voted * 100 / totalVotes).toFixed(2),\n          label: item.value + ' - ' + Number.parseFloat(item.voted * 100 / totalVotes).toFixed(2) + '%'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(Accordion, {\n      children: /*#__PURE__*/_jsxDEV(Accordion.Item, {\n        eventKey: poll,\n        children: [/*#__PURE__*/_jsxDEV(Accordion.Header, {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Accordion.Body, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"poll\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Risultati\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"options\",\n              children: pollProgressbar\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Total Votes: \", totalVotes]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  } else {\n    console.log(data);\n    let pollOptions;\n\n    if (voteData) {\n      pollOptions = voteData.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"dark\",\n            onClick: submitVote,\n            \"data-id\": item.id,\n            children: item.value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this)\n        }, item.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this);\n      });\n    }\n\n    return /*#__PURE__*/_jsxDEV(Accordion, {\n      children: /*#__PURE__*/_jsxDEV(Accordion.Item, {\n        eventKey: poll,\n        children: [/*#__PURE__*/_jsxDEV(Accordion.Header, {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Accordion.Body, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"poll\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"options\",\n              children: pollOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Total Votes: \", totalVotes]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(Poll, \"Zzz5wAyBhIr3cRW2JxPsoAkbUSY=\", false, function () {\n  return [useAuth];\n});\n\n_c = Poll;\nexport default Poll;\n\nvar _c;\n\n$RefreshReg$(_c, \"Poll\");","map":{"version":3,"sources":["C:/Users/nicolo.torreggiani/Documents/GitHub/lacattanea/src/Components/Poll.js"],"names":["React","useState","useEffect","Alert","Accordion","Button","ProgressBar","useAuth","Poll","pollId","currentUser","data","setData","voteData","setVoteData","users","setUsers","totalVotes","setTotalVotes","title","setTitle","poll","url","fetch","then","response","json","console","log","sum","forEach","obj","voted","submitVote","e","includes","email","voteSelected","currentTarget","dataset","id","voteCurrent","push","options","method","body","JSON","stringify","headers","res","pollProgressbar","map","item","Number","parseFloat","toFixed","value","pollOptions"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,WAAnC,QAAsD,iBAAtD;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,OAAO,YAAP;;;AAEA,SAASC,IAAT,CAAc;AAACC,EAAAA;AAAD,CAAd,EAAuB;AAAA;;AAEnB;AACJ;AACA;AACI,QAAM;AAACC,IAAAA;AAAD,MAAgBH,OAAO,EAA7B;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,EAAhC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,EAAxC;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,EAAlC;AACA,QAAMoB,IAAI,GAAGZ,MAAb;AACA,QAAMa,GAAG,GAAG,2CAAyCD,IAArD,CAZmB,CAcnB;;AACAnB,EAAAA,SAAS,CAAC,MAAM;AACZqB,IAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADpB,EAECF,IAFD,CAEOb,IAAD,IAAU;AACZgB,MAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;AACAG,MAAAA,WAAW,CAACH,IAAI,CAAC,MAAD,CAAJ,CAAa,SAAb,CAAD,CAAX;AACAK,MAAAA,QAAQ,CAACL,IAAI,CAAC,MAAD,CAAJ,CAAa,WAAb,CAAD,CAAR;AACAS,MAAAA,QAAQ,CAACT,IAAI,CAAC,MAAD,CAAJ,CAAa,OAAb,CAAD,CAAR;AACAC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACA,UAAIkB,GAAG,GAAG,CAAV;AACAlB,MAAAA,IAAI,CAAC,MAAD,CAAJ,CAAa,SAAb,EAAwBmB,OAAxB,CAAgC,UAAUC,GAAV,EAAc;AAC1CF,QAAAA,GAAG,IAAIE,GAAG,CAACC,KAAX;AACH,OAFD;AAGAd,MAAAA,aAAa,CAACW,GAAD,CAAb;AACH,KAbD;AAcH,GAfQ,EAeN,EAfM,CAAT;AAiBA;AACJ;AACA;AACA;AACA;;AACK,QAAMI,UAAU,GAAIC,CAAD,IAAO;AACvB;AACA,QAAG,CAACnB,KAAK,CAACoB,QAAN,CAAezB,WAAW,CAAC0B,KAA3B,CAAJ,EAAsC;AAClC,YAAMC,YAAY,GAAGH,CAAC,CAACI,aAAF,CAAgBC,OAAhB,CAAwBC,EAA7C;AACA,YAAMC,WAAW,GAAG5B,QAAQ,CAACwB,YAAD,CAAR,CAAuBL,KAA3C;AACAnB,MAAAA,QAAQ,CAACwB,YAAD,CAAR,CAAuBL,KAAvB,GAA+BS,WAAW,GAAG,CAA7C;AACAvB,MAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;AACAF,MAAAA,KAAK,CAAC2B,IAAN,CAAWhC,WAAW,CAAC0B,KAAvB;AACAzB,MAAAA,IAAI,CAAC,MAAD,CAAJ,CAAa,SAAb,IAA0BE,QAA1B;AACAF,MAAAA,IAAI,CAAC,MAAD,CAAJ,CAAa,WAAb,IAA4BI,KAA5B;AACA,YAAM4B,OAAO,GAAG;AACZC,QAAAA,MAAM,EAAE,MADI;AAEZC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAepC,IAAf,CAFM;AAGZqC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAHG,OAAhB;AAKAzB,MAAAA,KAAK,CAACD,GAAD,EAAMqB,OAAN,CAAL,CACKnB,IADL,CACWyB,GAAD,IAAStB,OAAO,CAACC,GAAR,CAAYqB,GAAZ,CADnB;AAEH,KAfD,CAgBA;AAhBA,SAiBK;AACD,4BACI,QAAC,KAAD;AAAO,UAAA,OAAO,EAAC,QAAf;AAAA,kCACI,QAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAQH;AACJ,GA7BA;;AA+BD,MAAGlC,KAAK,CAACoB,QAAN,CAAezB,WAAW,CAAC0B,KAA3B,CAAH,EAAqC;AACjC,QAAIc,eAAe,GAAGrC,QAAQ,CAACsC,GAAT,CAAcC,IAAD,IAAU;AACzC,0BACI;AAAA,+BACI,QAAC,WAAD;AAAa,UAAA,OAAO,EAAC,SAArB;AAA+B,UAAA,GAAG,EAAEC,MAAM,CAACC,UAAP,CAAmBF,IAAI,CAACpB,KAAL,GAAW,GAAX,GAAef,UAAlC,EAA+CsC,OAA/C,CAAuD,CAAvD,CAApC;AAA+F,UAAA,KAAK,EAAEH,IAAI,CAACI,KAAL,GAAa,KAAb,GAAqBH,MAAM,CAACC,UAAP,CAAmBF,IAAI,CAACpB,KAAL,GAAW,GAAX,GAAef,UAAlC,EAA+CsC,OAA/C,CAAuD,CAAvD,CAArB,GAAiF;AAAvL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KANqB,CAAtB;AAOA,wBACI,QAAC,SAAD;AAAA,6BACI,QAAC,SAAD,CAAW,IAAX;AAAgB,QAAA,QAAQ,EAAElC,IAA1B;AAAA,gCACI,QAAC,SAAD,CAAW,MAAX;AAAA,oBAAmBF;AAAnB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,SAAD,CAAW,IAAX;AAAA,iCACI;AAAK,YAAA,SAAS,EAAC,MAAf;AAAA,oCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,eAEA;AAAI,cAAA,SAAS,EAAE,SAAf;AAAA,wBACK+B;AADL;AAAA;AAAA;AAAA;AAAA,oBAFA,eAKA;AAAA,0CAAiBjC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,oBALA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAgBH,GAxBD,MAwBO;AACHU,IAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;AACA,QAAI8C,WAAJ;;AACA,QAAG5C,QAAH,EAAY;AACR4C,MAAAA,WAAW,GAAG5C,QAAQ,CAACsC,GAAT,CAAcC,IAAD,IAAU;AACjC,4BACI;AAAA,iCACI,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAC,MAAhB;AAAuB,YAAA,OAAO,EAAEnB,UAAhC;AAA4C,uBAASmB,IAAI,CAACZ,EAA1D;AAAA,sBAA+DY,IAAI,CAACI;AAApE;AAAA;AAAA;AAAA;AAAA;AADJ,WAASJ,IAAI,CAACI,KAAd;AAAA;AAAA;AAAA;AAAA,gBADJ;AAKH,OANa,CAAd;AAOH;;AACD,wBACI,QAAC,SAAD;AAAA,6BACI,QAAC,SAAD,CAAW,IAAX;AAAgB,QAAA,QAAQ,EAAEnC,IAA1B;AAAA,gCACI,QAAC,SAAD,CAAW,MAAX;AAAA,oBAAmBF;AAAnB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,SAAD,CAAW,IAAX;AAAA,iCACI;AAAK,YAAA,SAAS,EAAC,MAAf;AAAA,oCACA;AAAA,wBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,oBADA,eAEA;AAAI,cAAA,SAAS,EAAE,SAAf;AAAA,wBACKsC;AADL;AAAA;AAAA;AAAA;AAAA,oBAFA,eAKA;AAAA,0CAAiBxC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,oBALA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAgBH;AAEJ;;GA1HQT,I;UAKiBD,O;;;KALjBC,I;AA2HT,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Alert, Accordion, Button, ProgressBar } from 'react-bootstrap'\r\nimport { useAuth } from '../context/AuthContext'\r\nimport \"./Poll.css\";\r\n\r\nfunction Poll({pollId}){\r\n\r\n    /**\r\n     * DEFINIZIONE VARIABILI\r\n     */\r\n    const {currentUser} = useAuth();\r\n    const [data, setData] = useState();\r\n    const [voteData, setVoteData] = useState();\r\n    const [users, setUsers] = useState([]);\r\n    const [totalVotes, setTotalVotes] = useState(0);\r\n    const [title, setTitle] = useState();\r\n    const poll = pollId;\r\n    const url = \"http://localhost:5001/pollItem?pollId=\"+poll;\r\n\r\n    //Recupero dati singola survey\r\n    useEffect(() => {\r\n        fetch(url)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            console.log(data);\r\n            setVoteData(data[\"Item\"][\"options\"]);\r\n            setUsers(data[\"Item\"][\"usersPoll\"]);\r\n            setTitle(data[\"Item\"][\"title\"]);\r\n            setData(data);\r\n            let sum = 0;\r\n            data[\"Item\"][\"options\"].forEach(function (obj){\r\n                sum += obj.voted;\r\n            });\r\n            setTotalVotes(sum);\r\n        });\r\n    }, []);\r\n\r\n    /**\r\n     * Gestione invio voto\r\n     * @param {*} e \r\n     * @returns \r\n     */\r\n     const submitVote = (e) => {\r\n        //Se non hai ancora votato        \r\n        if(!users.includes(currentUser.email)){\r\n            const voteSelected = e.currentTarget.dataset.id;\r\n            const voteCurrent = voteData[voteSelected].voted;\r\n            voteData[voteSelected].voted = voteCurrent + 1;\r\n            setTotalVotes(totalVotes + 1);\r\n            users.push(currentUser.email);\r\n            data[\"Item\"][\"options\"] = voteData;\r\n            data[\"Item\"][\"usersPoll\"] = users;\r\n            const options = {\r\n                method: \"POST\",\r\n                body: JSON.stringify(data),\r\n                headers: { \"Content-Type\": \"application/json\"},\r\n            };\r\n            fetch(url, options)\r\n                .then((res) => console.log(res));\r\n        } \r\n        //Se hai giÃ  votato\r\n        else {\r\n            return (\r\n                <Alert variant=\"danger\">\r\n                    <Alert.Heading>Errore</Alert.Heading>\r\n                    <p>\r\n                        Hai giÃ  votato per questo sondaggio!\r\n                    </p>\r\n                </Alert>\r\n            );\r\n        }\r\n    };\r\n\r\n    if(users.includes(currentUser.email)){\r\n        let pollProgressbar = voteData.map((item) => {\r\n            return (\r\n                <li>\r\n                    <ProgressBar variant=\"success\" now={Number.parseFloat((item.voted*100/totalVotes)).toFixed(2)} label={item.value + ' - ' + Number.parseFloat((item.voted*100/totalVotes)).toFixed(2) + '%'}/>\r\n                </li>\r\n            );\r\n        });\r\n        return (\r\n            <Accordion>\r\n                <Accordion.Item eventKey={poll}>\r\n                    <Accordion.Header>{title}</Accordion.Header>\r\n                    <Accordion.Body>\r\n                        <div className=\"poll\">\r\n                        <h1>Risultati</h1>\r\n                        <ul className={\"options\"}>\r\n                            {pollProgressbar}\r\n                        </ul>\r\n                        <p>Total Votes: {totalVotes}</p>\r\n                        </div>\r\n                    </Accordion.Body>\r\n                </Accordion.Item>\r\n            </Accordion>\r\n          );\r\n    } else {\r\n        console.log(data);\r\n        let pollOptions;\r\n        if(voteData){\r\n            pollOptions = voteData.map((item) => {\r\n                return (\r\n                    <li key={item.value}>\r\n                        <Button variant=\"dark\" onClick={submitVote} data-id={item.id}>{item.value}</Button>\r\n                    </li>\r\n                );\r\n            });\r\n        }\r\n        return (\r\n            <Accordion>\r\n                <Accordion.Item eventKey={poll}>\r\n                    <Accordion.Header>{title}</Accordion.Header>\r\n                    <Accordion.Body>\r\n                        <div className=\"poll\">\r\n                        <h1>{title}</h1>\r\n                        <ul className={\"options\"}>\r\n                            {pollOptions}\r\n                        </ul>\r\n                        <p>Total Votes: {totalVotes}</p>\r\n                        </div>\r\n                    </Accordion.Body>\r\n                </Accordion.Item>\r\n            </Accordion>\r\n          );\r\n    }\r\n\r\n}\r\nexport default Poll;"]},"metadata":{},"sourceType":"module"}